+Lexer, the tokenizer component:
	-first of all, check that every qoute/double quote/parenthesis is closed properly.
	-parse the command block given and create a "t_tkns" for each type in the command block, resulting in a linked list of "t_tkns".
	-for the above step, a fucntion will be created to identify each type, and the needed types are:
		AND, OR
		PIPE
		REDR_O
		REDR_I
		HERE_DOC
		WHITE_SPC
		QUOTE
		DQUOTE
		PARENTHESIS
		VAR
		WORD
	-while identifying the types. the state (whether inside qoute/double quote/parenthesis or not), value and length of the value itself will be set.

	                    ********* keep in mind that no syntax errors are being handled here except the proper checks of *********
						********* qoute/double quote/parenthesis													    *********
	-the function that will loop through the command block to identify every type will call/need two other functions:
		.a function that will be given the TYPE, and start of string to create a t_tkns node and return it and handle everything according to that type.
		.a second function that will be given the head of the doubly-linkedlist and the node returned by the previuos function to link it to it.


	

