+Lexer, the tokenizer component:
	-first of all, check that every qoute/double quote/parenthesis is closed properly.
	-parse the command block given and create a "t_tkns" for each type in the command block, resulting in a linked list of "t_tkns".
	-for the above step, a fucntion will be created to identify each type, and the needed types are:
		AND, OR
		PIPE
		REDR_O
		REDR_I
		HERE_DOC
		WHITE_SPC
		QUOTE
		DQUOTE
		PARENTHESIS
		VAR
		WORD
	-while identifying the types. the state (whether inside qoute/double quote/parenthesis or not), value and length of the value itself will be set.

	                    ********* keep in mind that no syntax errors are being handled here except the proper checks of *********
						********* qoute/double quote/parenthesis													    *********
	-the function that will loop through the command block to identify every type will call/need two other functions:
		.a function that will be given the TYPE, and start of string to create a t_tkns node and return it and handle everything according to that type.
		.a second function that will be given the head of the doubly-linkedlist and the node returned by the previuos function to link it to it.
+Parser, the AST generator:
	-the whole logic will be composed of 6 functions, from which 5 will be for some of the token type.
	-we will pass the token list to the first main function which will call the other lower function below it and so every other fucntion will do.
	-but also keep in mind that other lower functions can call functions above them (subshell case).

		.givtree()
		.logops()
		.lqados()
		.cmdlst()
		.cmd()
		.redir()

	-5 of the fucntions will have a set of delimiters to break down the whole command line, each function will handle the delimters differently.
	-the recursion that will happen here is a result of the functions treating every delimiter differently, for example:
		.when ft_logops() is given this "ls && echo hello && echo joo" as a list of tokens, it will break it down using the '&&' token
		 and ft_logops() is called on every token that is followed by a '&&' token and for everything that is not followed by it will
		 be passed directly to a function below it.
+Executor, The AST Parser:
	-the executor will walk through the AST in a similar fashion to how the parser generated the AST, fork()'ing and execve()'ing each command accordingly.
	-we will have five main functions from which two will be recursive functions:

		.rslv_redr(), this function will resolve the redirection, and return the needed data for that matter.
		.executor(), this will be the function that we call first to trigger other lower functions and might also use it to handle/manage errors.
		.do_logops(), handles the AND/OR, it checks if the node passed to it is an OR/AND and then call itself again on both the right/left of that node.
		.do_lqados(), handles the PIPE, it will be called if do_logops doesn't get the OR/AND as the root node and it will work in a similar fashion.
		.do_cmd(), handles a CMD which has no left nor right nodes, fork()'ing and execve()'ing for the CMD and also handling redirections for that CMD.

	-now for the execution we have to keep track of the exit status of every command process so the 3 do_xxxx() functions will share the exit status through
	 their return value.
	-finally for the redirection, it will be resolved by the rslv_redr(), and it will be called by either one of these 3 do_xxxx() functions or by all of them
	 based on where the redirection is (whethere for a whole subshell or a single command), and the resolved redirection will also be shared between the 3 do_xxxx()
	 functions using their arguments.
